# -*- coding: utf-8 -*-
"""Day 77 - Seaborn and Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11QwqSlAGf1AWI4l47gvlBpNDQA7riNCZ

# Introduction

Do higher film budgets lead to more box office revenue? Let's find out if there's a relationship using the movie budgets and financial performance data that I've scraped from [the-numbers.com](https://www.the-numbers.com/movie/budgets) on **May 1st, 2018**. 

<img src=https://i.imgur.com/kq7hrEh.png>

# Import Statements
"""

import pandas as pd
import matplotlib.pyplot as plt

import seaborn as sns
from sklearn.linear_model import LinearRegression

"""# Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

"""# Read the Data"""

data = pd.read_csv('cost_revenue_dirty.csv')

"""# Explore and Clean the Data

**Challenge**: Answer these questions about the dataset:
1. How many rows and columns does the dataset contain?
2. Are there any NaN values present?
3. Are there any duplicate rows?
4. What are the data types of the columns?
"""

data.head()

print(f'The dataset has {data.shape[0]} rows and {data.shape[1]} columns.')

print(f'There are {data.isna().sum().sum()} NaN values present.')

print(f'There are {data.duplicated().values.sum()} duplicated rows.')

print(f'The data types of the columns:\n{data.dtypes}')

"""## Data Type Conversions

**Challenge**: Convert the `USD_Production_Budget`, `USD_Worldwide_Gross`, and `USD_Domestic_Gross` columns to a numeric format by removing `$` signs and `,`. 
<br>
<br>
Note that *domestic* in this context refers to the United States.
"""

data.head()

chars_to_remove = [',', '$']
columns_to_clean = ['USD_Production_Budget', 'USD_Worldwide_Gross', 'USD_Domestic_Gross']

for col in columns_to_clean:
  for char in chars_to_remove:
    data[col] = data[col].astype(str).str.replace(char, '')
  data[col] = pd.to_numeric(data[col])

"""**Challenge**: Convert the `Release_Date` column to a Pandas Datetime type. """

data['Release_Date'] = pd.to_datetime(data['Release_Date'], format='%m/%d/%Y')

"""## Descriptive Statistics

**Challenge**: 

1. What is the average production budget of the films in the data set?
2. What is the average worldwide gross revenue of films?
3. What were the minimums for worldwide and domestic revenue?
4. Are the bottom 25% of films actually profitable or do they lose money?
5. What are the highest production budget and highest worldwide gross revenue of any film?
6. How much revenue did the lowest and highest budget films make?
"""

data.head()

data.describe()

print('Average production budget of the films: 31M.')
print('Average worldwide gross revenue: 89M.')
print('Minimums for worldwide and domestic revenue: 0. If the films were canceled or never screened.')
print('The bottom 25% of films lose money.')
print('The highest production budget: 425M and highest worldwide gross revenue of any film: 2.7B.')

# The lowest budget film made X revenue
data[data.USD_Production_Budget == 1100]

# The highest budget film made X revenue
data[data.USD_Production_Budget == 425000000]

"""# Investigating the Zero Revenue Films

**Challenge** How many films grossed $0 domestically (i.e., in the United States)? What were the highest budget films that grossed nothing?
"""

zero_domestic = data[data.USD_Domestic_Gross == 0]
print(f'{len(zero_domestic)} films grossed $0 domestically.')

zero_domestic.sort_values('USD_Production_Budget', ascending=False)

"""**Challenge**: How many films grossed $0 worldwide? What are the highest budget films that had no revenue internationally?"""

zero_worldwide = data[data.USD_Worldwide_Gross == 0]
print(f'{len(zero_worldwide)} films grossed $0 worldwide.')

zero_worldwide.head()

zero_worldwide.sort_values('USD_Production_Budget', ascending=False)

"""### Filtering on Multiple Conditions"""

international_releases = data.loc[(data.USD_Worldwide_Gross != 0) & (data.USD_Domestic_Gross == 0)]
print(f'Number of international releases: {len(international_releases)}')
international_releases.head()

"""**Challenge**: Use the [`.query()` function](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html) to accomplish the same thing. Create a subset for international releases that had some worldwide gross revenue, but made zero revenue in the United States. 

Hint: This time you'll have to use the `and` keyword.
"""

international_releases_subset = data.query('USD_Domestic_Gross == 0 and USD_Worldwide_Gross != 0')
print(f'{len(international_releases_subset)}')
international_releases_subset.head()

"""### Unreleased Films

**Challenge**:
* Identify which films were not released yet as of the time of data collection (May 1st, 2018).
* How many films are included in the dataset that have not yet had a chance to be screened in the box office? 
* Create another DataFrame called data_clean that does not include these films. 
"""

# Date of Data Collection
scrape_date = pd.Timestamp('2018-5-1')

# Identify which films were not released yet as of the time of data collection (May 1st, 2018).
films_not_released = data.query('Release_Date > @scrape_date')
print(f'{len(films_not_released)} films not released.')
films_not_released.head()

# Create another DataFrame called data_clean that does not include these films.
data_clean = data.drop(films_not_released.index)

"""### Films that Lost Money

**Challenge**: 
What is the percentage of films where the production costs exceeded the worldwide gross revenue? 
"""

data_clean.head()

data_clean.describe()

# Number of films where production > revenue
production_cost_bigger = data_clean.query('USD_Production_Budget > USD_Worldwide_Gross')

# Percentage of films where the production costs exceeded the worldwide gross revenue
print(f'Percentage of films where the production costs exceeded the worldwide gross revenue: {len(production_cost_bigger) / len(data_clean) * 100}')

"""# Seaborn for Data Viz: Bubble Charts"""

plt.figure(figsize=(8, 4),
           dpi=200)

with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                      x='USD_Production_Budget',
                      y='USD_Worldwide_Gross',
                      hue='USD_Worldwide_Gross',
                      size='USD_Worldwide_Gross')

  ax.set(ylim=(0, 3000000000),
        xlim=(0, 450000000),
        ylabel='Revenue in $ billions',
        xlabel='Budget in $100 millions')

plt.show()
plt.close()

"""### Plotting Movie Releases over Time

**Challenge**: Try to create the following Bubble Chart:

<img src=https://i.imgur.com/8fUn9T6.png>


"""

plt.figure(figsize=(8, 4), dpi=200)

with sns.axes_style(style='darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='Release_Date',
                       y='USD_Production_Budget',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
  
  ax.set(xlim=(data_clean.Release_Date.min(), data_clean.Release_Date.max()),
        ylim=(data_clean.USD_Production_Budget.min(), 450000000),
        ylabel='Budget in $100 millions',
        xlabel='Year')

"""# Converting Years to Decades Trick

**Challenge**: Create a column in `data_clean` that has the decade of the release. 

<img src=https://i.imgur.com/0VEfagw.png width=650> 

Here's how: 
1. Create a [`DatetimeIndex` object](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DatetimeIndex.html) from the Release_Date column. 
2. Grab all the years from the `DatetimeIndex` object using the `.year` property.
<img src=https://i.imgur.com/5m06Ach.png width=650>
3. Use floor division `//` to convert the year data to the decades of the films.
4. Add the decades as a `Decade` column to the `data_clean` DataFrame.
"""

dt_index = pd.DatetimeIndex(data_clean.Release_Date)
years = dt_index.year
decades = years // 10 * 10
data_clean['Decades'] = decades

data_clean.head()

"""### Separate the "old" (before 1969) and "New" (1970s onwards) Films

**Challenge**: Create two new DataFrames: `old_films` and `new_films`
* `old_films` should include all the films before 1969 (up to and including 1969)
* `new_films` should include all the films from 1970 onwards
* How many films were released prior to 1970?
* What was the most expensive film made prior to 1970?
"""

old_films = data_clean[data_clean.Decades < 1970]
new_films = data_clean[data_clean.Decades >= 1970]

print(f'{old_films.shape[0]} films were created prior to 1970.')

print(f'The most expensive film made prior 1970 cost ${old_films.USD_Production_Budget.max()}')

old_films[old_films.USD_Production_Budget == 42000000]

"""# Seaborn Regression Plots"""

plt.figure(figsize=(8, 4), dpi=200)

with sns.axes_style(style='whitegrid'):
  ax = sns.regplot(data=old_films,
                   x='USD_Production_Budget',
                   y='USD_Worldwide_Gross',
                   scatter_kws={'alpha': 0.4},
                   line_kws={'color': 'black'})
  
  ax.set(xlabel='Budget in $ millions',
         xlim=(old_films.USD_Production_Budget.min(), old_films.USD_Production_Budget.max()),
         ylabel='Revenue in $ billions',
         ylim=(old_films.USD_Worldwide_Gross.min(), old_films.USD_Worldwide_Gross.max()))

"""**Challenge**: Use Seaborn's `.regplot()` to show the scatter plot and linear regression line against the `new_films`. 
<br>
<br>
Style the chart

* Put the chart on a `'darkgrid'`.
* Set limits on the axes so that they don't show negative values.
* Label the axes on the plot "Revenue in \$ billions" and "Budget in \$ millions".
* Provide HEX colour codes for the plot and the regression line. Make the dots dark blue (#2f4b7c) and the line orange (#ff7c43).

Interpret the chart

* Do our data points for the new films align better or worse with the linear regression than for our older films?
* Roughly how much would a film with a budget of $150 million make according to the regression line?
"""

plt.figure(figsize=(8, 4), dpi=200)

with sns.axes_style(style='darkgrid'):
  ax = sns.regplot(data=new_films,
                   x='USD_Production_Budget',
                   y='USD_Worldwide_Gross',
                   color='#2f4b7c',
                   line_kws={'color': '#ff7c43'})
  
  ax.set(xlabel='Budget in $ millions',
         ylabel='Revenue in $ billions',
         xlim=(new_films.USD_Production_Budget.min(), 450000000),
         ylim=(new_films.USD_Worldwide_Gross.min(), 3000000000))

"""# Run Your Own Regression with scikit-learn

$$ REV \hat ENUE = \theta _0 + \theta _1 BUDGET$$
"""

regression = LinearRegression()

X = pd.DataFrame(new_films, columns=['USD_Production_Budget'])
y = pd.DataFrame(new_films, columns=['USD_Worldwide_Gross'])

# Find the best fit line
regression.fit(X, y)

# Theta zero
regression.intercept_

# Theta one
regression.coef_

# R-squared
regression.score(X, y)

"""**Challenge**: Run a linear regression for the `old_films`. Calculate the intercept, slope and r-squared. How much of the variance in movie revenue does the linear model explain in this case?"""

regression_old_films = LinearRegression()
X = pd.DataFrame(old_films, columns=['USD_Production_Budget'])
y = pd.DataFrame(old_films, columns=['USD_Worldwide_Gross'])

regression_old_films.fit(X, y)

regression_old_films.intercept_

regression_old_films.coef_

regression_old_films.score(X, y)

"""# Use Your Model to Make a Prediction

We just estimated the slope and intercept! Remember that our Linear Model has the following form:

$$ REV \hat ENUE = \theta _0 + \theta _1 BUDGET$$

**Challenge**:  How much global revenue does our model estimate for a film with a budget of $350 million? 
"""

budget = 350000000
revenue_estimate = regression.intercept_[0] + regression.coef_[0, 0] * budget
revenue_estimate = round(revenue_estimate, -6)
print(f'The estimated revenue for a $350M film is ${revenue_estimate}')